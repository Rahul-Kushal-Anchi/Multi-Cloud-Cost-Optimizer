# AWS Cost Optimizer - GitHub Actions CI/CD Pipeline
# Comprehensive CI/CD pipeline for production deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: aws-cost-optimizer
  ECS_SERVICE: aws-cost-optimizer-service
  ECS_CLUSTER: aws-cost-optimizer-cluster
  ECS_TASK_DEFINITION: aws-cost-optimizer-task

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json

  # Code Quality and Testing
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web-app/package-lock.json

      - name: Install Python dependencies
        run: |
          pip install -r api/requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy

      - name: Install Node.js dependencies
        run: |
          cd web-app
          npm ci

      - name: Run Python linting
        run: |
          flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check api/
          isort --check-only api/
          mypy api/

      - name: Run Node.js linting
        run: |
          cd web-app
          npm run lint

      - name: Run Python tests
        run: |
          pytest api/tests/ --cov=api --cov-report=xml --cov-report=html

      - name: Run Node.js tests
        run: |
          cd web-app
          npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml,./web-app/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build and Test Docker Images
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan, quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, test, and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          push: false
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run container tests
        run: |
          docker run --rm -d --name test-container ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          sleep 30
          docker exec test-container curl -f http://localhost:8000/health
          docker stop test-container

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-dev \
            --service ${{ env.ECS_SERVICE }}-dev \
            --force-new-deployment

      - name: Run smoke tests
        run: |
          sleep 60
          curl -f https://dev.awscostoptimizer.com/health
          curl -f https://dev.awscostoptimizer.com/api/health

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-staging \
            --service ${{ env.ECS_SERVICE }}-staging \
            --force-new-deployment

      - name: Run integration tests
        run: |
          sleep 60
          curl -f https://staging.awscostoptimizer.com/health
          curl -f https://staging.awscostoptimizer.com/api/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-prod \
            --service ${{ env.ECS_SERVICE }}-prod \
            --force-new-deployment

      - name: Run production tests
        run: |
          sleep 120
          curl -f https://awscostoptimizer.com/health
          curl -f https://awscostoptimizer.com/api/health

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Production deployment successful! ðŸš€'

  # Infrastructure Updates
  update-infrastructure:
    name: Update Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[infra]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive deployment/terraform/

      - name: Terraform Init
        run: |
          cd deployment/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd deployment/terraform
          terraform plan -var-file="environments/${{ github.ref_name }}.tfvars"

      - name: Terraform Apply
        run: |
          cd deployment/terraform
          terraform apply -auto-approve -var-file="environments/${{ github.ref_name }}.tfvars"

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          pip install locust
          locust -f tests/load/locustfile.py \
            --host=https://staging.awscostoptimizer.com \
            --users=100 \
            --spawn-rate=10 \
            --run-time=5m \
            --headless

  # Security Compliance
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run compliance checks
        run: |
          # SOC2 compliance checks
          pip install scout-suite
          scout aws --profile default --report-dir ./compliance-reports
          
          # Generate compliance report
          echo "Compliance check completed" > compliance-report.txt

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.txt

  # Cost Optimization
  cost-optimization:
    name: Cost Optimization
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run cost optimization analysis
        run: |
          # Analyze current costs
          aws ce get-cost-and-usage \
            --time-period Start=2024-01-01,End=2024-01-31 \
            --granularity MONTHLY \
            --metrics BlendedCost

          # Generate cost optimization recommendations
          echo "Cost optimization analysis completed" > cost-analysis.txt

      - name: Upload cost analysis
        uses: actions/upload-artifact@v3
        with:
          name: cost-analysis
          path: cost-analysis.txt
